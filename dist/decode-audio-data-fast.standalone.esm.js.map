{"version":3,"file":"decode-audio-data-fast.standalone.esm.js","sources":["../node_modules/mp3-parser/lib/lib.js","../node_modules/mp3-parser/lib/id3v2.js","../node_modules/mp3-parser/lib/xing.js","../node_modules/mp3-parser/main.js","../src/index.js"],"sourcesContent":["//     mp3-parser/lib v0.3.0\n\n//     https://github.com/biril/mp3-parser\n//     Licensed and freely distributed under the MIT License\n//     Copyright (c) 2013-2016 Alex Lambiris\n\n// ----\n\n/* jshint browser:true */\n/* global exports:false, define:false */\n(function (globalObject, createModule) {\n    \"use strict\";\n\n    // Export as a module or global depending on environment:\n\n    // Global `define` method with `amd` property signifies an AMD loader (require.js, curl.js, ..)\n    if (typeof define === \"function\" && define.amd) {\n        return define([\"exports\"], createModule);\n    }\n\n    // Global `exports` object signifies CommonJS enviroments with `module.exports`, e.g. Node\n    if (typeof exports === \"object\") { return createModule(exports); }\n\n    // If none of the above, then assume a browser sans AMD (also attach a `noConflict`)\n    var previousMp3ParserLib = globalObject.mp3ParserLib;\n    createModule(globalObject.mp3ParserLib = {\n        noConflict: function () {\n            var lib = globalObject.mp3ParserLib;\n            globalObject.mp3ParserLib = previousMp3ParserLib;\n            return (this.noConflict = function () { return lib; }).call();\n        }\n    });\n}(this, function (lib) {\n    \"use strict\";\n\n    // Produce octet's binary representation as a string\n    var octetToBinRep = (function () {\n        var b = []; // The binary representation\n        return function (octet) {\n            b[0] = ((octet & 128) === 128 ? \"1\" : \"0\");\n            b[1] = ((octet & 64)  === 64  ? \"1\" : \"0\");\n            b[2] = ((octet & 32)  === 32  ? \"1\" : \"0\");\n            b[3] = ((octet & 16)  === 16  ? \"1\" : \"0\");\n            b[4] = ((octet & 8)   === 8   ? \"1\" : \"0\");\n            b[5] = ((octet & 4)   === 4   ? \"1\" : \"0\");\n            b[6] = ((octet & 2)   === 2   ? \"1\" : \"0\");\n            b[7] = ((octet & 1)   === 1   ? \"1\" : \"0\");\n            return b.join(\"\");\n        };\n    }());\n\n    // Get the number of bytes in a frame given its `bitrate`, `samplingRate` and `padding`.\n    //  Based on [magic formula](http://mpgedit.org/mpgedit/mpeg_format/mpeghdr.htm)\n    lib.getFrameByteLength = function (kbitrate, samplingRate, padding, mpegVersion, layerVersion) {\n        var sampleLength = lib.sampleLengthMap[mpegVersion][layerVersion];\n        var paddingSize = padding ? (layerVersion === \"11\" ? 4 : 1) : 0;\n        var byteRate = kbitrate * 1000 / 8;\n        return Math.floor((sampleLength * byteRate / samplingRate) + paddingSize);\n    };\n\n    lib.getXingOffset = function (mpegVersion, channelMode) {\n        var mono = channelMode === \"11\";\n        if (mpegVersion === \"11\") { // mpeg1\n            return mono ? 21 : 36;\n        } else {\n            return mono ? 13 : 21;\n        }\n    };\n\n    //\n    lib.v1l1Bitrates = {\n        \"0000\": \"free\",\n        \"0001\": 32,\n        \"0010\": 64,\n        \"0011\": 96,\n        \"0100\": 128,\n        \"0101\": 160,\n        \"0110\": 192,\n        \"0111\": 224,\n        \"1000\": 256,\n        \"1001\": 288,\n        \"1010\": 320,\n        \"1011\": 352,\n        \"1100\": 384,\n        \"1101\": 416,\n        \"1110\": 448,\n        \"1111\": \"bad\"\n    };\n\n    //\n    lib.v1l2Bitrates = {\n        \"0000\": \"free\",\n        \"0001\": 32,\n        \"0010\": 48,\n        \"0011\": 56,\n        \"0100\": 64,\n        \"0101\": 80,\n        \"0110\": 96,\n        \"0111\": 112,\n        \"1000\": 128,\n        \"1001\": 160,\n        \"1010\": 192,\n        \"1011\": 224,\n        \"1100\": 256,\n        \"1101\": 320,\n        \"1110\": 384,\n        \"1111\": \"bad\"\n    };\n\n    //\n    lib.v1l3Bitrates = {\n        \"0000\": \"free\",\n        \"0001\": 32,\n        \"0010\": 40,\n        \"0011\": 48,\n        \"0100\": 56,\n        \"0101\": 64,\n        \"0110\": 80,\n        \"0111\": 96,\n        \"1000\": 112,\n        \"1001\": 128,\n        \"1010\": 160,\n        \"1011\": 192,\n        \"1100\": 224,\n        \"1101\": 256,\n        \"1110\": 320,\n        \"1111\": \"bad\"\n    };\n\n    //\n    lib.v2l1Bitrates = {\n        \"0000\": \"free\",\n        \"0001\": 32,\n        \"0010\": 48,\n        \"0011\": 56,\n        \"0100\": 64,\n        \"0101\": 80,\n        \"0110\": 96,\n        \"0111\": 112,\n        \"1000\": 128,\n        \"1001\": 144,\n        \"1010\": 160,\n        \"1011\": 176,\n        \"1100\": 192,\n        \"1101\": 224,\n        \"1110\": 256,\n        \"1111\": \"bad\"\n    };\n\n    //\n    lib.v2l2Bitrates = {\n        \"0000\": \"free\",\n        \"0001\": 8,\n        \"0010\": 16,\n        \"0011\": 24,\n        \"0100\": 32,\n        \"0101\": 40,\n        \"0110\": 48,\n        \"0111\": 56,\n        \"1000\": 64,\n        \"1001\": 80,\n        \"1010\": 96,\n        \"1011\": 112,\n        \"1100\": 128,\n        \"1101\": 144,\n        \"1110\": 160,\n        \"1111\": \"bad\"\n    };\n    lib.v2l3Bitrates = lib.v2l2Bitrates;\n\n    //\n    lib.v1SamplingRates = {\n        \"00\": 44100,\n        \"01\": 48000,\n        \"10\": 32000,\n        \"11\": \"reserved\"\n    };\n\n    //\n    lib.v2SamplingRates = {\n        \"00\": 22050,\n        \"01\": 24000,\n        \"10\": 16000,\n        \"11\": \"reserved\"\n    };\n\n    //\n    lib.v25SamplingRates = {\n        \"00\": 11025,\n        \"01\": 12000,\n        \"10\": 8000,\n        \"11\": \"reserved\"\n    };\n\n    //\n    lib.channelModes = {\n        \"00\": \"Stereo\",\n        \"01\": \"Joint stereo (Stereo)\",\n        \"10\": \"Dual channel (Stereo)\",\n        \"11\": \"Single channel (Mono)\"\n    };\n\n    //\n    lib.mpegVersionDescription = {\n        \"00\": \"MPEG Version 2.5 (unofficial)\",\n        \"01\": \"reserved\",\n        \"10\": \"MPEG Version 2 (ISO/IEC 13818-3)\",\n        \"11\": \"MPEG Version 1 (ISO/IEC 11172-3)\"\n    };\n\n    //\n    lib.layerDescription = {\n        \"00\": \"reserved\",\n        \"01\": \"Layer III\",\n        \"10\": \"Layer II\",\n        \"11\": \"Layer I\"\n    };\n\n    //\n    lib.bitrateMap = {\n        \"11\": {\n            \"01\": lib.v1l3Bitrates,\n            \"10\": lib.v1l2Bitrates,\n            \"11\": lib.v1l1Bitrates\n        },\n        \"10\": {\n            \"01\": lib.v2l3Bitrates,\n            \"10\": lib.v2l2Bitrates,\n            \"11\": lib.v2l1Bitrates\n        }\n    };\n\n    //\n    lib.samplingRateMap = {\n        \"00\": lib.v25SamplingRates,\n        \"10\": lib.v2SamplingRates,\n        \"11\": lib.v1SamplingRates\n    };\n\n    //\n    lib.v1SampleLengths = {\n        \"01\": 1152,\n        \"10\": 1152,\n        \"11\": 384\n    };\n\n    //\n    lib.v2SampleLengths = {\n        \"01\": 576,\n        \"10\": 1152,\n        \"11\": 384\n    };\n\n    //\n    lib.sampleLengthMap = {\n        \"01\": lib.v2SampleLengths,\n        \"10\": lib.v2SampleLengths,\n        \"11\": lib.v1SampleLengths\n    };\n\n    // Convert the given string `str` to an array of words (octet pairs). If all characters in the\n    //  given string are within the ISO/IEC 8859-1 subset then the returned array may safely be\n    //  interpreted as an array of values in the [0, 255] range, where each value requires a single\n    //  octet to be represented. Otherwise it should be interpreted as an array of values in the\n    //  [0, 65.535] range, where each value requires a word (octet pair) to be represented.\n    //\n    // Not meant to be used with UTF-16 strings that contain chars outside the BMP. See\n    //  [charCodeAt on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt)\n    lib.wordSeqFromStr = function (str) {\n        for (var i = str.length - 1, seq = []; i >= 0; --i) {\n            seq[i] = str.charCodeAt(i);\n        }\n        return seq;\n    };\n\n    // Common character sequences converted to byte arrays\n    lib.seq = {\n        id3: lib.wordSeqFromStr(\"ID3\"),\n        xing: lib.wordSeqFromStr(\"Xing\"),\n        info: lib.wordSeqFromStr(\"Info\")\n    };\n\n    // A handy no-op to reuse\n    lib.noOp = function () {};\n\n    // Decode a [synchsafe](http://en.wikipedia.org/wiki/Synchsafe) value. Synchsafes are used in\n    //  ID3 tags, instead of regular ints, to avoid the unintended introduction of bogus\n    //  frame-syncs. Note that the spec requires that syncsafe be always stored in big-endian order\n    //  (Implementation shamefully lifted from relevant wikipedia article)\n    lib.unsynchsafe = function (value) {\n        var out = 0;\n        var mask = 0x7F000000;\n\n        while (mask) {\n            out >>= 1;\n            out |= value & mask;\n            mask >>= 8;\n        }\n\n        return out;\n    };\n\n    // Get a value indicating whether given DataView `view` contains the `seq` sequence (array\n    //  of octets) at `offset` index. Note that no check is performed for the adequate length of\n    //  given view as this should be carried out by the caller\n    lib.isSeq = function (seq, view, offset) {\n        for (var i = seq.length - 1; i >= 0; i--) {\n            if (seq[i] !== view.getUint8(offset + i)) { return false; }\n        }\n        return true;\n    };\n\n    // Get a value indicating whether given DataView `view` contains the `str` string\n    //  at `offset` index. The view is parsed as an array of 8bit single-byte coded characters\n    //  (i.e. ISO/IEC 8859-1, _non_ Unicode). Will return the string itself if it does, false\n    //  otherwise. Note that no check is performed for the adequate length of given view as\n    //  this should be carried out be the caller as part of the section-parsing process\n    /*\n    isStr = function (str, view, offset) {\n        return isSeq(lib.wordSeqFromStr(str), view, offset) ? str : false;\n    };\n    */\n\n    // Locate first occurrence of sequence `seq` (an array of octets) in DataView `view`.\n    //  Search starts at given `offset` and ends after `length` octets. Will return the\n    //  absolute offset of sequence if found, -1 otherwise\n    lib.locateSeq = function (seq, view, offset, length) {\n        for (var i = 0, l = length - seq.length + 1; i < l; ++i) {\n            if (lib.isSeq(seq, view, offset + i)) { return offset + i; }\n        }\n        return -1;\n    };\n\n    lib.locateStrTrm = {\n        // Locate the first occurrence of non-Unicode null-terminator (i.e. a single zeroed-out\n        //  octet) in DataView `view`. Search starts at given `offset` and ends after `length`\n        //  octets. Will return the absolute offset of sequence if found, -1 otherwise\n        iso: function (view, offset, length) {\n            return lib.locateSeq([0], view, offset, length);\n        },\n\n        // Locate the first occurrence of Unicode null-terminator (i.e. a sequence of two\n        //  zeroed-out octets) in DataView `view`. Search starts at given `offset` and ends after\n        //  `length` octets. Will return the absolute offset of sequence if found, -1 otherwise\n        ucs: function (view, offset, length) {\n            var trmOffset = lib.locateSeq([0, 0], view, offset, length);\n            if (trmOffset === -1) { return -1; }\n            if ((trmOffset - offset) % 2 !== 0) { ++trmOffset; }\n            return trmOffset;\n        }\n    };\n\n    lib.readStr = {\n        // Parse DataView `view` begining at `offset` index and return a string built from\n        //  `length` octets. The view is parsed as an array of 8bit single-byte coded characters\n        //  (i.e. ISO/IEC 8859-1, _non_ Unicode). Will essentially return the string comprised of\n        //  octets [offset, offset + length). Note that no check is performed for the adequate\n        //  length of given view as this should be carried out be the caller as part of the\n        //  section-parsing process\n        iso: function (view, offset, length) {\n            return String.fromCharCode.apply(null, new Uint8Array(view.buffer, offset, length));\n        },\n\n        // UCS-2 (ISO/IEC 10646-1:1993, UCS-2) version of `readStr`. UCS-2 is the fixed-width\n        //  two-byte subset of Unicode that can only express values inside the Basic Multilingual\n        //  Plane (BMP). Note that this method is generally unsuitable for parsing non-trivial\n        //  UTF-16 strings which may contain surrogate pairs. [This is only marginally related\n        //  though as, according to ID3v2, all Unicode strings should be UCS-2.] Further info:\n        //\n        //  * [How to convert ArrayBuffer to and from String](http://updates.html5rocks.com/2012/06/How-to-convert-ArrayBuffer-to-and-from-String)\n        //  * [The encoding spec](http://encoding.spec.whatwg.org/)\n        //  * [stringencoding shim](https://code.google.com/p/stringencoding/)\n        //\n        // About the BOM: The current implementation will check for and remove the leading BOM from\n        //  the given view to avoid invisible characters that mess up the resulting strings. MDN's\n        //  documentation for [fromCharCode](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)\n        //  suggests that it can correctly convert UCS-2 buffers to strings. And indeed, tests\n        //  performed with UCS-2 LE encoded frames indicate that it does. However, no tests have\n        //  been made for UCS-2 BE. (Kid3, the ID3v2 Tag generator used for tests at the time of\n        //  this writing, goes totally weird when switched to BE)\n        ucs: function (view, offset, length) {\n            // Tweak offset to remove the BOM (LE: FF FE / BE: FE FF)\n            if (view.getUint16(offset) === 0xFFFE || view.getUint16(offset) === 0xFEFF) {\n                offset += 2;\n                length -= 2;\n            }\n\n            var buffer = view.buffer;\n\n            // When offset happens to be an even number of octets, the array-buffer may be wrapped\n            //  in a Uint16Array. In the event that it's _not_, an actual copy has to be made\n            // (Note that Node <= 0.8 as well as IE <= 10 lack an ArrayBuffer#slice. TODO: shim it)\n            if (offset % 2 === 1) {\n                buffer = buffer.slice(offset, offset + length);\n                offset = 0;\n            }\n\n            return String.fromCharCode.apply(null, new Uint16Array(buffer, offset, length / 2));\n        }\n    };\n\n    lib.readTrmStr = {\n        // Similar to `readStr.iso` but will check for a null-terminator determining the end of the\n        //  string. The returned string will be of _at most_ `length` octets\n        iso: function (view, offset, length) {\n            var trmOffset = lib.locateStrTrm.iso(view, offset, length);\n            if (trmOffset !== -1) { length = trmOffset - offset; }\n            return lib.readStr.iso(view, offset, length);\n        },\n\n        // Similar to `readStr.ucs` but will check for a null-terminator determining the end of the\n        //  string. The returned string will be of _at most_ `length` octets\n        ucs: function (view, offset, length) {\n            var trmOffset = lib.locateStrTrm.ucs(view, offset, length);\n            if (trmOffset !== -1) { length = trmOffset - offset; }\n            return lib.readStr.ucs(view, offset, length);\n        }\n    };\n\n    // ### Read a Frame Header\n    //\n    // Read header of frame located at `offset` of DataView `view`. Returns null in the event\n    //  that no frame header is found at `offset`\n    lib.readFrameHeader = function (view, offset) {\n        offset || (offset = 0);\n\n        // There should be more than 4 octets ahead\n        if (view.byteLength - offset <= 4) { return null; }\n\n        // Header's first (out of four) octet: `11111111`: Frame sync (all bits must be set)\n        var b1 = view.getUint8(offset);\n        if (b1 !== 255) { return null; }\n\n        // Header's second (out of four) octet: `111xxxxx`\n        //\n        // * `111.....`: Rest of frame sync (all bits must be set)\n        // * `...BB...`: MPEG Audio version ID (11 -> MPEG Version 1 (ISO/IEC 11172-3))\n        // * `.....CC.`: Layer description (01 -> Layer III)\n        // * `.......1`: Protection bit (1 = Not protected)\n\n        // Require the three most significant bits to be `111` (>= 224)\n        var b2 = view.getUint8(offset + 1);\n        if (b2 < 224) { return null; }\n\n        var mpegVersion = octetToBinRep(b2).substr(3, 2);\n        var layerVersion = octetToBinRep(b2).substr(5, 2);\n\n        //\n        var header = {\n            _section: { type: \"frameHeader\", byteLength: 4, offset: offset },\n            mpegAudioVersionBits: mpegVersion,\n            mpegAudioVersion: lib.mpegVersionDescription[mpegVersion],\n            layerDescriptionBits: layerVersion,\n            layerDescription: lib.layerDescription[layerVersion],\n            isProtected: b2 & 1, // Just check if last bit is set\n        };\n        header.protectionBit = header.isProtected ? \"1\" : \"0\";\n\n        if (header.mpegAudioVersion === \"reserved\") { return null; }\n        if (header.layerDescription === \"reserved\") { return null; }\n\n        // Header's third (out of four) octet: `EEEEFFGH`\n        //\n        // * `EEEE....`: Bitrate index. 1111 is invalid, everything else is accepted\n        // * `....FF..`: Sampling rate, 00=44100, 01=48000, 10=32000, 11=reserved\n        // * `......G.`: Padding bit, 0=frame not padded, 1=frame padded\n        // * `.......H`: Private bit. This is informative\n        var b3 = view.getUint8(offset + 2);\n        b3 = octetToBinRep(b3);\n        header.bitrateBits = b3.substr(0, 4);\n        header.bitrate = lib.bitrateMap[mpegVersion][layerVersion][header.bitrateBits];\n        if (header.bitrate === \"bad\") { return null; }\n\n        header.samplingRateBits = b3.substr(4, 2);\n        header.samplingRate = lib.samplingRateMap[mpegVersion][header.samplingRateBits];\n        if (header.samplingRate === \"reserved\") { return null; }\n\n        header.frameIsPaddedBit = b3.substr(6, 1);\n        header.frameIsPadded = header.frameIsPaddedBit === \"1\";\n        header.framePadding = header.frameIsPadded ? 1 : 0;\n\n        header.privateBit = b3.substr(7, 1);\n\n        // Header's fourth (out of four) octet: `IIJJKLMM`\n        //\n        // * `II......`: Channel mode\n        // * `..JJ....`: Mode extension (only if joint stereo)\n        // * `....K...`: Copyright\n        // * `.....L..`: Original\n        // * `......MM`: Emphasis\n        var b4 = view.getUint8(offset + 3);\n        header.channelModeBits = octetToBinRep(b4).substr(0, 2);\n        header.channelMode = lib.channelModes[header.channelModeBits];\n\n        return header;\n    };\n\n    // ### Read a Frame\n    //\n    // Read frame located at `offset` of DataView `view`. Will acquire the frame header (see\n    //  `readFrameHeader`) plus some basic information about the frame - notably the frame's length\n    //  in bytes. If `requireNextFrame` is set, the presence of a _next_ valid frame will be\n    //  required for _this_ frame to be regarded as valid. Returns null in the event that no frame\n    //  is found at `offset`\n    lib.readFrame = function (view, offset, requireNextFrame) {\n        offset || (offset = 0);\n\n        var frame = {\n            _section: { type: \"frame\", offset: offset },\n            header: lib.readFrameHeader(view, offset)\n        };\n\n        var head = frame.header; // Convenience shortcut\n\n        // Frame should always begin with a valid header\n        if (!head) { return null; }\n\n        frame._section.sampleLength =\n            lib.sampleLengthMap[head.mpegAudioVersionBits][head.layerDescriptionBits];\n\n        //\n        frame._section.byteLength = lib.getFrameByteLength(head.bitrate, head.samplingRate,\n            head.framePadding, head.mpegAudioVersionBits, head.layerDescriptionBits);\n        frame._section.nextFrameIndex = offset + frame._section.byteLength;\n\n        // No \"Xing\" or \"Info\" identifier should be present - this would indicate that this\n        //  is in fact a Xing tag masquerading as a frame\n        var xingOffset = lib.getXingOffset(head.mpegAudioVersionBits, head.channelModeBits);\n        if (lib.isSeq(lib.seq.xing, view, offset + xingOffset) ||\n            lib.isSeq(lib.seq.info, view, offset + xingOffset)) {\n            return null;\n        }\n\n        // If a next frame is required then the data at `frame._section.nextFrameIndex` should be\n        //  a valid frame header\n        if (requireNextFrame && !lib.readFrameHeader(view, frame._section.nextFrameIndex)) {\n            return null;\n        }\n\n        return frame;\n    };\n}));\n","//     mp3-parser/id3v2 v0.3.0\n\n//     https://github.com/biril/mp3-parser\n//     Licensed and freely distributed under the MIT License\n//     Copyright (c) 2013-2016 Alex Lambiris\n\n// ----\n\n/* jshint browser:true */\n/* global exports:false, define:false, require:false */\n(function (globalObject, createModule) {\n    \"use strict\";\n\n    // Export as a module or global depending on environment:\n\n    // Global `define` method with `amd` property signifies an AMD loader (require.js, curl.js, ..)\n    if (typeof define === \"function\" && define.amd) {\n        return define([\"exports\", \"./lib\"], createModule);\n    }\n\n    // Global `exports` object signifies CommonJS enviroments with `module.exports`, e.g. Node\n    if (typeof exports === \"object\") {\n        return createModule(exports, require(\"./lib\"));\n    }\n\n    // If none of the above, then assume a browser sans AMD (also attach a `noConflict`)\n    var previousMp3Id3v2Parser = globalObject.mp3Id3v2Parser;\n    createModule(globalObject.mp3Id3v2Parser = {\n        noConflict: function () {\n            var mp3Id3v2Parser = globalObject.mp3Id3v2Parser;\n            globalObject.mp3Id3v2Parser = previousMp3Id3v2Parser;\n            return (this.noConflict = function () { return mp3Id3v2Parser; }).call();\n        }\n    }, globalObject.mp3ParserLib);\n}(this, function (mp3Id3v2Parser, lib) {\n    \"use strict\";\n\n    //\n    var id3v2TagFrameNames = {\n        AENC: \"Audio encryption\",\n        APIC: \"Attached picture\",\n        CHAP: \"Chapter\",\n        COMM: \"Comments\",\n        COMR: \"Commercial frame\",\n        ENCR: \"Encryption method registration\",\n        EQUA: \"Equalization\",\n        ETCO: \"Event timing codes\",\n        GEOB: \"General encapsulated object\",\n        GRID: \"Group identification registration\",\n        IPLS: \"Involved people list\",\n        LINK: \"Linked information\",\n        MCDI: \"Music CD identifier\",\n        MLLT: \"MPEG location lookup table\",\n        OWNE: \"Ownership frame\",\n        PRIV: \"Private frame\",\n        PCNT: \"Play counter\",\n        POPM: \"Popularimeter\",\n        POSS: \"Position synchronisation frame\",\n        RBUF: \"Recommended buffer size\",\n        RVAD: \"Relative volume adjustment\",\n        RVRB: \"Reverb\",\n        SYLT: \"Synchronized lyric/text\",\n        SYTC: \"Synchronized tempo codes\",\n        TALB: \"Album/Movie/Show title\",\n        TBPM: \"BPM (beats per minute)\",\n        TCOM: \"Composer\",\n        TCON: \"Content type\",\n        TCOP: \"Copyright message\",\n        TDAT: \"Date\",\n        TDLY: \"Playlist delay\",\n        TENC: \"Encoded by\",\n        TEXT: \"Lyricist/Text writer\",\n        TFLT: \"File type\",\n        TIME: \"Time\",\n        TIT1: \"Content group description\",\n        TIT2: \"Title/songname/content description\",\n        TIT3: \"Subtitle/Description refinement\",\n        TKEY: \"Initial key\",\n        TLAN: \"Language(s)\",\n        TLEN: \"Length\",\n        TMED: \"Media type\",\n        TOAL: \"Original album/movie/show title\",\n        TOFN: \"Original filename\",\n        TOLY: \"Original lyricist(s)/text writer(s)\",\n        TOPE: \"Original artist(s)/performer(s)\",\n        TORY: \"Original release year\",\n        TOWN: \"File owner/licensee\",\n        TPE1: \"Lead performer(s)/Soloist(s)\",\n        TPE2: \"Band/orchestra/accompaniment\",\n        TPE3: \"Conductor/performer refinement\",\n        TPE4: \"Interpreted, remixed, or otherwise modified by\",\n        TPOS: \"Part of a set\",\n        TPUB: \"Publisher\",\n        TRCK: \"Track number/Position in set\",\n        TRDA: \"Recording dates\",\n        TRSN: \"Internet radio station name\",\n        TRSO: \"Internet radio station owner\",\n        TSIZ: \"Size\",\n        TSRC: \"ISRC (international standard recording code)\",\n        TSSE: \"Software/Hardware and settings used for encoding\",\n        TYER: \"Year\",\n        TXXX: \"User defined text information frame\",\n        UFID: \"Unique file identifier\",\n        USER: \"Terms of use\",\n        USLT: \"Unsychronized lyric/text transcription\",\n        WCOM: \"Commercial information\",\n        WCOP: \"Copyright/Legal information\",\n        WOAF: \"Official audio file webpage\",\n        WOAR: \"Official artist/performer webpage\",\n        WOAS: \"Official audio source webpage\",\n        WORS: \"Official internet radio station homepage\",\n        WPAY: \"Payment\",\n        WPUB: \"Publishers official webpage\",\n        WXXX: \"User defined URL link frame\"\n    };\n\n    //\n    var readFrameContent = {};\n\n    // Read the content of a\n    //  [text-information frame](http://id3.org/id3v2.3.0#Text_information_frames). These are\n    //  common and contain info such as artist and album. There may only be one text info frame\n    //  of its kind in a tag. If the textstring is followed by a termination (00) all the\n    //  following information should be ignored and not be displayed. All text frame\n    //  identifiers begin with \"T\". Only text frame identifiers begin with \"T\", with the\n    //  exception of the \"TXXX\" frame\n    //\n    // * Encoding:    a single octet where 0 = ISO-8859-1, 1 = UCS-2\n    // * Information: a text string according to encoding\n    readFrameContent.T = function (view, offset, length) {\n        var content = { encoding: view.getUint8(offset) };\n        content.value = lib.readStr[content.encoding === 0 ? \"iso\" : \"ucs\"](\n            view, offset + 1, length - 1);\n        return content;\n    };\n\n    // Read the content of a\n    //  [user-defined text-information frame](http://id3.org/id3v2.3.0#User_defined_text_information_frame).\n    //  Intended for one-string text information concerning the audiofile in a similar way to\n    //  the other \"T\"-frames. The frame body consists of a description of the string,\n    //  represented as a terminated string, followed by the actual string. There may be more\n    //  than one \"TXXX\" frame in each tag, but only one with the same description\n    //\n    // * Encoding:    a single octet where 0 = ISO-8859-1, 1 = UCS-2\n    // * Description: a text string according to encoding (followed by 00 (00))\n    // * Value:       a text string according to encoding\n    readFrameContent.TXXX = function  (view, offset, length) {\n        // The content to be returned\n        var content = { encoding: view.getUint8(offset) };\n\n        // Encoding + null term. = at least 2 octets\n        if (length < 2) {\n            return content; // Inadequate length!\n        }\n\n        // Encoding and content beginning (description field)\n        var enc = content.encoding === 0 ? \"iso\" : \"ucs\";\n        var offsetBeg = offset + 1;\n\n        // Locate the the null terminator seperating description and URL\n        var offsetTrm = lib.locateStrTrm[enc](view, offsetBeg, length - 4);\n        if (offsetTrm === -1) {\n            return content; // Not found!\n        }\n\n        // Read description and value data into content\n        content.description = lib.readStr[enc](view, offsetBeg, offsetTrm - offsetBeg);\n        offsetTrm += enc === \"ucs\" ? 2 : 1; // Move past terminating sequence\n        content.value = lib.readStr[enc](view, offsetTrm, offset + length - offsetTrm);\n\n        return content;\n    };\n\n    // Read the content of a\n    //  [URL-link frame](http://id3.org/id3v2.3.0#URL_link_frames). There may only be one\n    //  URL link frame of its kind in a tag, except when stated otherwise in the frame\n    //  description. If the textstring is followed by a termination (00) all the following\n    //  information should be ignored and not be displayed. All URL link frame identifiers\n    //  begins with \"W\". Only URL link frame identifiers begins with \"W\"\n    //\n    // * URL: a text string\n    readFrameContent.W = function (view, offset, length) {\n        return { value: lib.readStr.iso(view, offset, length) };\n    };\n\n    // Read the content of a\n    //  [user-defined URL-link frame](http://id3.org/id3v2.3.0#User_defined_URL_link_frame).\n    //  Intended for URL links concerning the audiofile in a similar way to the other\n    //  \"W\"-frames. The frame body consists of a description of the string, represented as a\n    //  terminated string, followed by the actual URL. The URL is always encoded with\n    //  ISO-8859-1. There may be more than one \"WXXX\" frame in each tag, but only one with the\n    //  same description\n    //\n    // * Encoding:    a single octet where 0 = ISO-8859-1, 1 = UCS-2\n    // * Description: a text string according to encoding (followed by 00 (00))\n    // * URL:         a text string\n    readFrameContent.WXXX = function (view, offset, length) {\n        // The content to be returned\n        var content = { encoding: view.getUint8(offset) };\n\n        // Encoding + null term. = at least 2 octets\n        if (length < 2) {\n            return content; // Inadequate length!\n        }\n\n        // Encoding and content beginning (description field)\n        var enc = content.encoding === 0 ? \"iso\" : \"ucs\";\n        var offsetBeg = offset + 1;\n\n        // Locate the the null terminator seperating description and URL\n        var offsetTrm = lib.locateStrTrm[enc](view, offsetBeg, length - 4);\n        if (offsetTrm === -1) {\n            return content; // Not found!\n        }\n\n        // Read description and value data into content\n        content.description = lib.readStr[enc](view, offsetBeg, offsetTrm - offsetBeg);\n        offsetTrm += enc === \"ucs\" ? 2 : 1; // Move past terminating sequence\n        content.value = lib.readStr.iso(view, offsetTrm, offset + length - offsetTrm);\n\n        return content;\n    };\n\n    // Read the content of a [comment frame](http://id3.org/id3v2.3.0#Comments).\n    //  Intended for any kind of full text information that does not fit in any other frame.\n    //  Consists of a frame header followed by encoding, language and content descriptors and\n    //  ends with the actual comment as a text string. Newline characters are allowed in the\n    //  comment text string. There may be more than one comment frame in each tag, but only one\n    //  with the same language and content descriptor. [Note that the structure of comment\n    //  frames is identical to that of USLT frames - `readFrameContentComm` will handle both.]\n    //\n    // * Encoding:    a single octet where 0 = ISO-8859-1, 1 = UCS-2\n    // * Language:    3 digit (octet) lang-code (ISO-639-2)\n    // * Short descr: a text string according to encoding (followed by 00 (00))\n    // * Actual text: a text string according to encoding\n    readFrameContent.COMM = function (view, offset, length) {\n        // The content to be returned\n        var content = { encoding: view.getUint8(offset) };\n\n        // Encoding + language + null term. = at least 5 octets\n        if (length < 5) {\n            return content; // Inadequate length!\n        }\n\n        // Encoding and content beggining (short description field)\n        var enc = content.encoding === 0 ? \"iso\" : \"ucs\";\n        var offsetBeg = offset + 4;\n\n        // Read the language field - 3 octets at most\n        content.language = lib.readTrmStr.iso(view, offset + 1, 3);\n\n        // Locate the the null terminator seperating description and text\n        var offsetTrm = lib.locateStrTrm[enc](view, offsetBeg, length - 4);\n        if (offsetTrm === -1) {\n            return content; // Not found!\n        }\n\n        // Read short description and text data into content\n        content.description = lib.readStr[enc](view, offsetBeg, offsetTrm - offsetBeg);\n        offsetTrm += enc === \"ucs\" ? 2 : 1; // Move past terminating sequence\n        content.text = lib.readStr[enc](view, offsetTrm, offset + length - offsetTrm);\n\n        return content;\n    };\n\n    // Read the content of a\n    //  [unique file identifier frame](http://id3.org/id3v2.3.0#Unique_file_identifier). Allows\n    //  identification of the audio file by means of some database that may contain more\n    //  information relevant to the content. Begins with a URL containing an email address, or\n    //  a link to a location where an email address can be found that belongs to the\n    //  organisation responsible for this specific database implementation. The 'Owner\n    //  identifier' must be non-empty (more than just a termination) and is followed by the\n    //  actual identifier, which may be up to 64 bytes. There may be more than one \"UFID\" frame\n    //  in a tag, but only one with the same 'Owner identifier'. Note that this frame is very\n    //  similar to the \"PRIV\" frame\n    //\n    // * Owner identifier: a text string (followed by 00)\n    // * Identifier:       up to 64 bytes of binary data\n    readFrameContent.UFID = function (view, offset, length) {\n        // Read up to the first null terminator to get the owner-identifier\n        var ownerIdentifier = lib.readTrmStr.iso(view, offset, length);\n\n        // Figure out the identifier based on frame length vs owner-identifier length\n        var identifier = new DataView(view.buffer, offset + ownerIdentifier.length + 1,\n            length - ownerIdentifier.length - 1);\n\n        return { ownerIdentifier: ownerIdentifier, identifier: identifier };\n    };\n\n    // Read the content of an\n    //  [involved people list frame](http://id3.org/id3v2.3.0#Involved_people_list). Contains\n    //  names of those involved - those contributing to the audio file - and how they were\n    //  involved. The body simply contains the first 'involvement' as a terminated string, directly\n    //  followed by the first 'involvee' as a terminated string, followed by a second terminated\n    //  involvement string and so on. However, in the current implementation the frame's content is\n    //  parsed as a collection of strings without any semantics attached. There may only be one\n    //  \"IPLS\" frame in each tag\n    //\n    // * Encoding:            a single octet where 0 = ISO-8859-1, 1 = UCS-2\n    // * People list strings: a series of strings, e.g. string 00 (00) string 00 (00) ..\n    readFrameContent.IPLS = function (view, offset, length) {\n        // The content to be returned\n        var content = { encoding: view.getUint8(offset), values: [] };\n\n        // Encoding and content beginning (people list - specifically, first 'involvement' string)\n        var enc = content.encoding === 0 ? \"iso\" : \"ucs\";\n        var offsetBeg = offset + 1;\n\n        // Index of null-terminator found within people list (seperates involvement / involvee)\n        var offsetNextStrTrm;\n\n        while (offsetBeg < offset + length) {\n            // We expect all strings within the people list to be null terminated ..\n            offsetNextStrTrm = lib.locateStrTrm[enc](view, offsetBeg, length - (offsetBeg - offset));\n\n            // .. except _perhaps_ the last one. In this case fix the offset at the frame's end\n            if (offsetNextStrTrm === -1) {\n                offsetNextStrTrm = offset + length;\n            }\n\n            content.values.push(lib.readStr[enc](view, offsetBeg, offsetNextStrTrm - offsetBeg));\n            offsetBeg = offsetNextStrTrm + (enc === \"ucs\" ? 2 : 1);\n        }\n\n        return content;\n    };\n\n    // Read the content of a [terms of use frame](http://id3.org/id3v2.3.0#Terms_of_use_frame).\n    //  Contains a description of the terms of use and ownership of the file. Newlines are\n    //  allowed in the text. There may only be one \"USER\" frame in a tag.\n    //\n    // * Encoding:    a single octet where 0 = ISO-8859-1, 1 = UCS-2\n    // * Language:    3 digit (octet) lang-code (ISO-639-2)\n    // * Actual text: a text string according to encoding\n    readFrameContent.USER = function (view, offset, length) {\n        // The content to be returned\n        var content = { encoding: view.getUint8(offset) };\n\n        // Encoding + language + null term. = at least 5 octets\n        if (length < 5) {\n            return content; // Inadequate length!\n        }\n\n        // Read the language field - 3 octets at most\n        content.language = lib.readTrmStr.iso(view, offset + 1, 3);\n\n        // Read the text field\n        var offsetBeg = offset + 4;\n        var enc = content.encoding === 0 ? \"iso\" : \"ucs\";\n        content.text = lib.readStr[enc](view, offsetBeg, offset + length - offsetBeg);\n\n        return content;\n    };\n\n    // Read the content of a\n    //  [private frame](http://id3.org/id3v2.3.0#Private_frame). Contains binary data that does\n    //  no fit into the other frames. Begins with a URL containing an email address, or\n    //  a link to a location where an email address can be found. The 'Owner identifier' must\n    //  be non-empty (more than just a termination) and is followed by the actual data. There\n    //  may be more than one \"PRIV\" frame in a tag, but only with different contents. Note that\n    //  this frame is very similar to the \"UFID\" frame\n    //\n    // * Owner identifier: a text string (followed by 00)\n    // * private data:     binary data (of unbounded length)\n    readFrameContent.PRIV = function (view, offset, length) {\n        // Read up to the first null terminator to get the owner-identifier\n        var ownerIdentifier = lib.readTrmStr.iso(view, offset, length);\n\n        // Figure out the private data based on frame length vs owner-identifier length\n        var privateData = new DataView(view.buffer, offset + ownerIdentifier.length + 1,\n            length - ownerIdentifier.length - 1);\n\n        return { ownerIdentifier: ownerIdentifier, privateData: privateData };\n    };\n\n    // Read the content of a [play counter](http://id3.org/id3v2.3.0#Play_counter). A counter\n    //  of the number of times a file has been played. There may only be one \"PCNT\" frame in a\n    //  tag. [According to the standard, \"When the counter reaches all one's, one byte is\n    //  inserted in front of the counter thus making the counter eight bits bigger.\" This is\n    //  not currently taken into account]\n    //\n    // * Counter: 4 octets (at least ..)\n    readFrameContent.PCNT = function (view, offset, length) {\n        // The counter must be at least 4 octets long to begin with\n        if (length < 4) {\n            return {}; // Inadequate length!\n        }\n\n        // Assume the counter is always exactly 4 octets ..\n        return { counter: view.getUint32(offset) };\n    };\n\n    // Read the content of a [popularimeter](http://id3.org/id3v2.3.0#Popularimeter). Intended\n    //  as a measure for the file's popularity, it contains a user's email address, one rating\n    //  octet and a four octer play counter, intended to be increased with one for every time\n    //  the file is played. If no personal counter is wanted it may be omitted. [As is the case\n    //  for the \"PCNT\" frame, according to the standard, \"When the counter reaches all one's,\n    //  one byte is inserted in front of the counter thus making the counter eight bits\n    //  bigger.\" This is not currently taken into account]. There may be more than one \"POPM\"\n    //  frame in each tag, but only one with the same email address\n    //\n    // * Email to user: a text string (followed by 00)\n    // * Rating:        a single octet, values in 0-255 (0 = unknown, 1 = worst, 255 = best)\n    // * Counter:       4 octets (at least ..)\n    readFrameContent.POPM = function (view, offset, length) {\n        var content = {\n                email: lib.readTrmStr.iso(view, offset, length)\n            };\n\n        // rating offset\n        offset += content.email.length + 1;\n\n        // email str term + rating + counter = at least 6 octets\n        if (length < 6) {\n            return content; // Inadequate length!\n        }\n\n        content.rating = view.getUint8(offset);\n\n        // Assume the counter is always exactly 4 octets ..\n        content.counter = view.getUint32(offset + 1);\n\n        return content;\n    };\n\n    // Read the content of an [attached picture](http://id3.org/id3v2.3.0#Attached_picture).\n    //  Contains a picture directly related to the audio file. In the event that the MIME media\n    //  type name is omitted, \"image/\" will be implied. The description has a maximum length of\n    //  64 characters, but may be empty. There may be several pictures attached to one file,\n    //  each in their individual \"APIC\" frame, but only one with the same content descriptor.\n    //  There may only be one picture with the picture type declared as picture type $01 and\n    //  $02 respectively.\n    //\n    // * Encoding:     a single octet where 0 = ISO-8859-1, 1 = UCS-2\n    // * MIME Type:    a text string (followed by 00) - MIME type and subtype of image\n    // * Picture type: a single octet, values in 0-255: a type-id as given by the standard\n    // * Description:  a text string according to encoding (followed by 00 (00))\n    // * Picture data: binary data (of unbounded length)\n    readFrameContent.APIC = function (view, offset, length) {\n        // The content to be returned\n        var content = { encoding: view.getUint8(offset) };\n\n        // Encoding + MIME type string term + pic type octet + descr. string term = min 4 octets\n        if (length < 4) {\n            return content; // Inadequate length!\n        }\n\n        // Encoding and offsets of content beginning / null-terminator\n        var enc = content.encoding === 0 ? \"iso\" : \"ucs\";\n        var offsetBeg, offsetTrm;\n\n        // Locate the the null terminator seperating MIME type and picture type\n        offsetBeg = offset + 1; // After the encoding octet\n        offsetTrm = lib.locateStrTrm.iso(view, offsetBeg, length - 1);\n        if (offsetTrm === -1) {\n            return content; // Not found!\n        }\n\n        // Read MIME type\n        content.mimeType = lib.readStr.iso(view, offsetBeg, offsetTrm - offsetBeg);\n\n        // Read picture type\n        offsetBeg = offsetTrm + 1;\n        content.pictureType = view.getUint8(offsetBeg);\n\n        // Locate the the null terminator seperating description and picture data\n        offsetBeg += 1;\n        offsetTrm = lib.locateStrTrm[enc](view, offsetBeg, offset + length - offsetBeg);\n        if (offsetTrm === -1) {\n            return content; // Not found!\n        }\n\n        // Read description\n        content.description = lib.readStr[enc](view, offsetBeg, offsetTrm - offsetBeg);\n\n        // Read picture data\n        offsetBeg = offsetTrm + (enc === \"ucs\" ? 2 : 1);\n        content.pictureData = new DataView(view.buffer, offsetBeg, offset + length - offsetBeg);\n\n        return content;\n    };\n\n    // Read the chapter tag according to the ID3v2 Chapter Frame Addendum (http://id3.org/id3v2-chapters-1.0)\n    //  The frame contains subframes, typically TIT2, and possibly additional frames\n    //\n    // * Id:            string identifier of the chapter\n    // * Start time:    4 octets specifying the start of the chapter in milliseconds\n    // * End time:      4 octets specifying the end of the chapter in milliseconds\n    // * Start offset:  4 octets specifying the start of the chapter in bytes\n    // * End offset:    4 octets specifying the end of the chapter in bytes\n    // * Frames:        nested id3v2 frames\n    readFrameContent.CHAP = function (view, offset, length) {\n        // The content to be returned\n        var content = { encoding: view.getUint8(offset) };\n\n        // Locate the the null terminator between id and start time\n        var offsetTrm = lib.locateStrTrm.iso(view, offset, length - 1);\n\n        if (offsetTrm === -1) {\n            return content; // Not found!\n        }\n\n        // Read id\n        content.id = lib.readStr.iso(view, offset, offsetTrm - offset);\n\n        // Read start time\n        content.startTime = view.getUint32(offsetTrm + 1);\n\n        // Read end time\n        content.endTime = view.getUint32(offsetTrm + 5);\n\n        // Read start offset\n        content.startOffset = view.getUint32(offsetTrm + 9);\n\n        // Read end offset\n        content.endOffset = view.getUint32(offsetTrm + 13);\n\n        var offsetSubFrames = offsetTrm + 17;\n        content.frames = [];\n        while (offsetSubFrames < offset + length) {\n            var subFrame = mp3Id3v2Parser.readId3v2TagFrame(view, offsetSubFrames);\n            content.frames.push(subFrame);\n            offsetSubFrames += subFrame.header.size + 10;\n        }\n\n        return content;\n    };\n\n    // ### Read an ID3v2 Tag Frame\n    //\n    // Read [ID3v2 Tag frame](http://id3.org/id3v2.3.0#Declared_ID3v2_frames) located at `offset`\n    //  of DataView `view`. Returns null in the event that no tag-frame is found at `offset`\n    mp3Id3v2Parser.readId3v2TagFrame = function (view, offset) {\n        // All frames consist of a frame header followed by one or more fields containing the actual\n        // information. The frame header is 10 octets long and laid out as `IIIISSSSFF`, where\n        //\n        // * `IIII......`: Frame id (four characters)\n        // * `....SSSS..`: Size (frame size excluding frame header = frame size - 10)\n        // * `........FF`: Flags\n        var frame = {\n            header: {\n                id: lib.readStr.iso(view, offset, 4),\n                size: view.getUint32(offset + 4),\n                flagsOctet1: view.getUint8(offset + 8),\n                flagsOctet2: view.getUint8(offset + 9)\n            }\n        };\n\n        // An ID3v2 tag frame must have a length of at least 1 octet, excluding the header\n        if (frame.header.size < 1) { return frame; }\n\n        // A function to read the frame's content\n        var readContent = (function (read, id) { // jscs:disable requirePaddingNewLinesBeforeLineComments\n            // User-defined text-information frames\n            if (id === \"TXXX\") { return read.TXXX; }\n            // Text-information frames\n            if (id.charAt(0) === \"T\") { return read.T; }\n            // User-defined URL-link frames\n            if (id === \"WXXX\") { return read.WXXX; }\n            // URL-link frames\n            if (id.charAt(0) === \"W\") { return read.W; }\n            // Comment frames or Unsychronised lyrics/text transcription frames\n            if (id === \"COMM\" || id === \"USLT\") { return read.COMM; }\n            // For any other frame such as UFID, IPLS, USER, etc, return the reader function\n            //  that's named after the frame. Return a 'no-op reader' (which just returns\n            //  `undefined` as the frame's content) if no implementation found for given frame\n            return read[id] || lib.noOp;\n        }(readFrameContent, frame.header.id)); // jscs-enable requirePaddingNewLinesBeforeLineComments\n\n        // Store frame's friendly name\n        frame.name = id3v2TagFrameNames[frame.header.id];\n\n        // Read frame's content\n        frame.content = readContent(view, offset + 10, frame.header.size);\n\n        return frame;\n    };\n\n    // ### Read the ID3v2 Tag\n    //\n    // Read [ID3v2 Tag](http://id3.org/id3v2.3.0) located at `offset` of DataView `view`. Returns\n    //  null in the event that no tag is found at `offset`\n    mp3Id3v2Parser.readId3v2Tag = function (view, offset) {\n        offset || (offset = 0);\n\n        // The ID3v2 tag header, which should be the first information in the file, is 10 octets\n        //  long and laid out as `IIIVVFSSSS`, where\n        //\n        // * `III.......`: id, always \"ID3\" (0x49/73, 0x44/68, 0x33/51)\n        // * `...VV.....`: version (major version + revision number)\n        // * `.....F....`: flags: abc00000. a:unsynchronisation, b:extended header, c:experimental\n        // * `......SSSS`: tag's size as a synchsafe integer\n\n        // There should be at least 10 bytes ahead\n        if (view.byteLength - offset < 10) { return null; }\n\n        // The 'ID3' identifier is expected at given offset\n        if (!lib.isSeq(lib.seq.id3, view, offset)) { return null; }\n\n        //\n        var flagsOctet = view.getUint8(offset + 5);\n\n        //\n        var tag = {\n            _section: { type: \"ID3v2\", offset: offset },\n            header: {\n                majorVersion: view.getUint8(offset + 3),\n                minorRevision: view.getUint8(offset + 4),\n                flagsOctet: flagsOctet,\n                unsynchronisationFlag: (flagsOctet & 128) === 128,\n                extendedHeaderFlag: (flagsOctet & 64) === 64,\n                experimentalIndicatorFlag: (flagsOctet & 32) === 32,\n                size: lib.unsynchsafe(view.getUint32(offset + 6))\n            },\n            frames: []\n        };\n\n        // The size as expressed in the header is the size of the complete tag after\n        //  unsychronisation, including padding, excluding the header but not excluding the\n        //  extended header (total tag size - 10)\n        tag._section.byteLength = tag.header.size + 10;\n\n        // Index of octet following tag's last octet: The tag spans [offset, tagEnd)\n        //  (including the first 10 header octets)\n        var tagEnd = offset + tag._section.byteLength;\n\n        // TODO: Process extended header if present. The presence of an extended header will affect\n        //  the offset. Currently, it is asummed that no extended header is present so the offset\n        //  is fixed at 10 octets\n        // if (tag.header.extendedHeaderFlag) { /* TODO */ }\n\n        // Go on to read individual frames but only if the tag version is v2.3. This is the only\n        //  version currently supported\n        if (tag.header.majorVersion !== 3) { return tag; }\n\n        // To store frames as they're discovered while paring the tag\n        var frame;\n\n        // Move offset past the end of the tag header to start reading tag frames\n        offset += 10;\n        while (offset < tagEnd) {\n            // Locating a frame with a zeroed out id indicates that all valid frames have already\n            //  been parsed. It's all dead space hereon so practically we're done\n            if (view.getUint32(offset) === 0) { break; }\n\n            frame = mp3Id3v2Parser.readId3v2TagFrame(view, offset);\n\n            // Couldn't parse this frame so bail out\n            if (!frame) { break; }\n\n            tag.frames.push(frame);\n            offset += frame.header.size + 10;\n        }\n\n        return tag;\n    };\n}));\n","//     mp3-parser/xing v0.3.0\n\n//     https://github.com/biril/mp3-parser\n//     Licensed and freely distributed under the MIT License\n//     Copyright (c) 2013-2016 Alex Lambiris\n\n// ----\n\n/* jshint browser:true */\n/* global exports:false, define:false, require:false */\n(function (globalObject, createModule) {\n    \"use strict\";\n\n    // Export as a module or global depending on environment:\n\n    // Global `define` method with `amd` property signifies an AMD loader (require.js, curl.js, ..)\n    if (typeof define === \"function\" && define.amd) {\n        return define([\"exports\", \"./lib\"], createModule);\n    }\n\n    // Global `exports` object signifies CommonJS enviroments with `module.exports`, e.g. Node\n    if (typeof exports === \"object\") {\n        return createModule(exports, require(\"./lib\"));\n    }\n\n    // If none of the above, then assume a browser sans AMD (also attach a `noConflict`)\n    var previousMp3XingParser = globalObject.mp3XingParser;\n    createModule(globalObject.mp3XingParser = {\n        noConflict: function () {\n            var mp3XingParser = globalObject.mp3XingParser;\n            globalObject.mp3XingParser = previousMp3XingParser;\n            return (this.noConflict = function () { return mp3XingParser; }).call();\n        }\n    }, globalObject.mp3ParserLib);\n}(this, function (xingParser, lib) {\n    \"use strict\";\n\n    // ### Read the Xing Tag\n    //\n    // Read [Xing / Lame Tag](http://gabriel.mp3-tech.org/mp3infotag.html) located at `offset` of\n    //  DataView `view`. Returns null in the event that no frame is found at `offset`\n    xingParser.readXingTag = function (view, offset) {\n        offset || (offset = 0);\n\n        var tag = {\n            _section: { type: \"Xing\", offset: offset },\n            header: lib.readFrameHeader(view, offset)\n        };\n\n        var head = tag.header; // Convenience shortcut\n\n        // The Xing tag should begin with a valid frame header\n        if (!head) { return null; }\n\n        var xingOffset = offset +\n            lib.getXingOffset(head.mpegAudioVersionBits, head.channelModeBits);\n\n        // There should be at least 'offset' (header) + 4 (\"Xing\"/\"Info\") octets ahead\n        if (view.byteLength < xingOffset + 4) { return null; }\n\n        // A \"Xing\" or \"Info\" identifier should be present\n        tag.identifier = (lib.isSeq(lib.seq.xing, view, xingOffset) && \"Xing\") ||\n            (lib.isSeq(lib.seq.info, view, xingOffset) && \"Info\");\n        if (!tag.identifier) { return null; }\n\n        //\n        tag._section.byteLength = lib.getFrameByteLength(head.bitrate, head.samplingRate,\n            head.framePadding, head.mpegAudioVersionBits, head.layerDescriptionBits);\n        tag._section.nextFrameIndex = offset + tag._section.byteLength;\n\n        return tag;\n    };\n}));\n","//     mp3-parser v0.3.0\n\n//     https://github.com/biril/mp3-parser\n//     Licensed and freely distributed under the MIT License\n//     Copyright (c) 2013-2016 Alex Lambiris\n\n// ----\n\n/* jshint browser:true */\n/* global exports:false, define:false, require:false */\n(function (globalObject, createModule) {\n    \"use strict\";\n\n    // Export as a module or global depending on environment:\n\n    // Global `define` method with `amd` property signifies an AMD loader (require.js, curl.js, ..)\n    if (typeof define === \"function\" && define.amd) {\n        return define([\"exports\", \"./lib/lib\", \"./lib/id3v2\", \"./lib/xing\"], createModule);\n    }\n\n    // Global `exports` object signifies CommonJS enviroments with `module.exports`, e.g. Node\n    if (typeof exports === \"object\") {\n        return createModule(exports, require(\"./lib/lib\"), require(\"./lib/id3v2\"),\n            require(\"./lib/xing\"));\n    }\n\n    // If none of the above, then assume a browser sans AMD (also attach a `noConflict`)\n    var previousMp3Parser = globalObject.mp3Parser;\n    createModule(globalObject.mp3Parser = {\n        noConflict: function () {\n            var mp3Parser = globalObject.mp3Parser;\n            globalObject.mp3Parser = previousMp3Parser;\n            return (this.noConflict = function () { return mp3Parser; }).call();\n        }\n    }, globalObject.mp3ParserLib, globalObject.mp3Id3v2Parser, globalObject.mp3XingParser);\n}(this, function (mp3Parser, lib, id3v2Parser, xingParser) {\n    \"use strict\";\n\n    // ### TL;DR\n    //\n    // The parser exposes a collection of `read____` methods, each dedicated to reading a specific\n    //  section of the mp3 file. The current implementation includes `readFrameHeader`, `readFrame`,\n    //  `readId3v2Tag` and `readXingTag`. Each of these accepts a DataView-wrapped ArrayBuffer,\n    //  which should contain the actual mp3 data, and optionally an offset into the buffer.\n    //\n    // All methods return a description of the section read in the form of a hash containing\n    //  key-value pairs relevant to the section. For example the hash returned from\n    //  `readFrameHeader` always contains an `mpegAudioVersion` key of value \"MPEG Version 1\n    //  (ISO/IEC 11172-3)\" and a `layerDescription` key of value \"Layer III\". A description will\n    //  always have a `_section` hash with `type`, `byteLength` and `offset` keys:\n    //\n    //  * `type`: \"frame\", \"frameHeader\", \"Xing\" or \"ID3\"\n    //  * `byteLenfth`: Size of the section in bytes\n    //  * `offset`: Buffer offset at which this section resides\n\n    // ----\n\n    // ### Read a Frame Header\n    //\n    // Read and return description of header of frame located at `offset` of DataView `view`.\n    //  Returns `null` in the event that no frame header is found at `offset`\n    mp3Parser.readFrameHeader = function (view, offset) {\n        return lib.readFrameHeader(view, offset);\n    };\n\n    // ### Read a Frame\n    //\n    // Read and return description of frame located at `offset` of DataView `view`. Includes the\n    //  frame header description (see `readFrameHeader`) plus some basic information about the\n    //  frame - notably the frame's length in bytes. If `requireNextFrame` is set, the presence of\n    //  a _next_ valid frame will be required for _this_ frame to be regarded as valid. Returns\n    //  null in the event that no frame is found at `offset`\n    mp3Parser.readFrame = function (view, offset, requireNextFrame) {\n        return lib.readFrame(view, offset, requireNextFrame);\n    };\n\n    // ### Read the Last Frame\n    //\n    // Locate and return description of the very last valid frame in given DataView `view`. The\n    //  search is carried out in reverse, from given `offset` (or the very last octet if `offset`\n    //  is ommitted) to the first octet in the view. If `requireNextFrame` is set, the presence\n    //  of a next valid frame will be required for any found frame to be regarded as valid (causing\n    //  the method to essentially return the next-to-last frame on success). Returns `null` in the\n    //  event that no frame is found at `offset`\n    mp3Parser.readLastFrame = function (view, offset, requireNextFrame) {\n        offset || (offset = view.byteLength - 1);\n\n        var lastFrame = null;\n\n        for (; offset >= 0; --offset) {\n            if (view.getUint8(offset) === 255) {\n                // Located a candidate frame as 255 is a possible frame-sync byte\n                lastFrame = mp3Parser.readFrame(view, offset, requireNextFrame);\n                if (lastFrame) { return lastFrame; }\n            }\n        }\n\n        return null;\n    };\n\n    // ### Read the ID3v2 Tag\n    //\n    // Read and return description of [ID3v2 Tag](http://id3.org/id3v2.3.0) located at `offset` of\n    //  DataView `view`. (This will include any and all\n    //  [currently supported ID3v2 frames](https://github.com/biril/mp3-parser/wiki) located within\n    //  the tag). Returns `null` in the event that no tag is found at `offset`\n    mp3Parser.readId3v2Tag = function (view, offset) {\n        return id3v2Parser.readId3v2Tag(view, offset);\n    };\n\n    // ### Read the Xing Tag\n    //\n    // Read and return description of\n    //  [Xing / Lame Tag](http://gabriel.mp3-tech.org/mp3infotag.html) located at `offset` of\n    //  DataView `view`. Returns `null` in the event that no frame is found at `offset`\n    mp3Parser.readXingTag = function (view, offset) {\n        return xingParser.readXingTag(view, offset);\n    };\n\n    // ### Read all Tags up to First Frame\n    // Read and return descriptions of all tags found up to (and including) the very first frame.\n    //  Returns an array of sections which may include a description of a located ID3V2 tag, a\n    //  description of located Xing / Lame tag and a description of the a located first frame\n    //  ( See [this](http://www.rengels.de/computer/mp3tags.html) and\n    //  [this](http://stackoverflow.com/a/5013505) )\n    mp3Parser.readTags = function (view, offset) {\n        offset || (offset = 0);\n\n        var sections = [];\n        var section = null;\n        var isFirstFrameFound = false;\n        var bufferLength = view.byteLength;\n\n        var readers = [mp3Parser.readId3v2Tag, mp3Parser.readXingTag, mp3Parser.readFrame];\n        var numOfReaders = readers.length;\n\n        // While we haven't located the first frame, pick the next offset ..\n        for (; offset < bufferLength && !isFirstFrameFound; ++offset) {\n            // .. and try out each of the 'readers' on it\n            for (var i = 0; i < numOfReaders; ++i) {\n                section = readers[i](view, offset);\n\n                // If one of the readers successfully parses a section ..\n                if (section) {\n                    // .. store it ..\n                    sections.push(section);\n\n                    // .. and push the offset to the very end of end of that section. This way,\n                    //  we avoid iterating over offsets which definately aren't the begining of\n                    //  some section (they're part of the located section)\n                    offset += section._section.byteLength;\n\n                    // If the section we just parsed is a frame then we've actually located the\n                    //  first frame. Break out of the readers-loop making sure to set\n                    //  isFirstFrameFound (so that we also exit the outer loop)\n                    if (section._section.type === \"frame\") {\n                        isFirstFrameFound = true;\n                        break;\n                    }\n\n                    // The section is _not_ the first frame. So, having pushed the offset\n                    //  appropriately, retry all readers\n                    i = -1;\n                }\n            }\n        }\n\n        return sections;\n    };\n}));\n","import parser from 'mp3-parser';\n\nconst CHUNK_MAX_SIZE = 1000 * 1000;\nconst DEFAULT_CONCURRENCY = 4;\nconst CONCURRENCY =\n  ((typeof navigator !== 'undefined' && navigator.hardwareConcurrency) || 1) > 2\n    ? navigator.hardwareConcurrency\n    : DEFAULT_CONCURRENCY;\n\n/**\n * Creates a new ArrayBuffer out of two Uint8Arrays\n *\n * @private\n * @param   {Uint8Array}  baseUint8Array  first Uint8Array.\n * @param   {Uint8Array}  buffer          second Uint8Array.\n * @return  {ArrayBuffer}                  The new ArrayBuffer\n */\nfunction makeChunk(array1, array2) {\n  const tmp = new Uint8Array(array1.byteLength + array2.byteLength);\n  tmp.set(array1, 0);\n  tmp.set(array2, array1.byteLength);\n  return tmp.buffer;\n}\n\nfunction makeSaveChunk(chunkArrayBuffers, tagsUInt8Array, sourceUInt8Array) {\n  return function saveChunk(chunk) {\n    chunkArrayBuffers.push(\n      makeChunk(\n        tagsUInt8Array,\n        sourceUInt8Array.subarray(\n          chunk.frames[0]._section.offset,\n          chunk.frames[chunk.frames.length - 1]._section.offset +\n            chunk.frames[chunk.frames.length - 1]._section.byteLength\n        )\n      )\n    );\n  };\n}\n\nfunction emptyChunk(chunk) {\n  chunk.byteLength = 0;\n  chunk.frames.length = 0;\n}\n\nfunction addChunkFrame(chunk, frame) {\n  chunk.byteLength = chunk.byteLength + frame._section.byteLength;\n  chunk.frames.push(frame);\n}\n\nconst asyncWorker = (source, items, fn, output) => async () => {\n  let next;\n  while ((next = items.pop())) {\n    output[source.get(next)] = await fn(next);\n  }\n};\n\nfunction getArrayBuffer(file) {\n  return new Promise((resolve) => {\n    let fileReader = new FileReader();\n    fileReader.onloadend = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.readAsArrayBuffer(file);\n  });\n}\n\n// Use a promise wrapper on top of event based syntax\n// for browsers (Safari) which do not support promise-based syntax.\nfunction decodeArrayBuffer(audioCtx, arrayBuffer) {\n  return new Promise(audioCtx.decodeAudioData.bind(audioCtx, arrayBuffer));\n}\n\nasync function getFileAudioBuffer(file, audioCtx, options = {}) {\n  /* Copyright (c) 2019, Timothée 'Tim' Pillard, @ziir @tpillard - ISC */\n\n  const { concurrency = CONCURRENCY } = options;\n\n  const arrayBuffer = await getArrayBuffer(file);\n  const view = new DataView(arrayBuffer);\n\n  const tags = parser.readTags(view);\n  const firstFrame = tags.pop();\n  const uInt8Array = new Uint8Array(arrayBuffer);\n  const tagsUInt8Array = uInt8Array.subarray(0, firstFrame._section.offset);\n  const chunkArrayBuffers = [];\n  const saveChunk = makeSaveChunk(\n    chunkArrayBuffers,\n    tagsUInt8Array,\n    uInt8Array\n  );\n  let chunk = { byteLength: 0, frames: [] };\n  let next = firstFrame._section.offset + firstFrame._section.byteLength;\n  while (next) {\n    const frame = parser.readFrame(view, next);\n    next = frame && frame._section.nextFrameIndex;\n\n    if (frame) {\n      const chunkEnd =\n        chunk && chunk.byteLength + frame._section.byteLength >= CHUNK_MAX_SIZE;\n      if (chunkEnd) {\n        saveChunk(chunk);\n        emptyChunk(chunk);\n      }\n\n      addChunkFrame(chunk, frame);\n    }\n\n    if (chunk && (!frame || !next)) {\n      saveChunk(chunk);\n    }\n  }\n\n  const workers = [];\n  const source = new Map(chunkArrayBuffers.map((chunk, idx) => [chunk, idx]));\n  const audioBuffers = new Array(chunkArrayBuffers.length);\n  const decode = decodeArrayBuffer.bind(null, audioCtx);\n\n  for (let i = 0; i < Math.min(concurrency, source.size); i++) {\n    workers.push(\n      asyncWorker(source, chunkArrayBuffers, decode, audioBuffers)()\n    );\n  }\n  await Promise.all(workers);\n\n  const { numberOfChannels, sampleRate } = audioBuffers[0];\n  let length = audioBuffers.reduce((acc, current) => acc + current.length, 0);\n\n  const audioBuffer = audioCtx.createBuffer(\n    numberOfChannels,\n    length,\n    sampleRate\n  );\n\n  for (let j = 0; j < numberOfChannels; j++) {\n    let offset = 0;\n    for (let i = 0; i < audioBuffers.length; i++) {\n      audioBuffer.copyToChannel(audioBuffers[i].getChannelData(j), j, offset);\n      offset += audioBuffers[i].length;\n    }\n  }\n\n  return audioBuffer;\n}\n\nexport { getFileAudioBuffer };\n"],"names":["this","require$$0","require$$1","require$$2","parser"],"mappings":"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"}